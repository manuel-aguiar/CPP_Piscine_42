#include <iostream>

class Base1 {
public:
    int i[6];
    virtual void foo1() {}
};

class Base2 {
public:
    int j[6];
    virtual void foo2() {}
};

class Derived : public Base1, public Base2 {
public:
    void bar() {}
};

int main()
{
    Derived d;
    Base1* ptr1 = &d;
    Base2* ptr2 = &d;
    std::cout << "ptr1: " << ptr1 << std::endl;
    std::cout << "ptr2: " << ptr2 << std::endl;
    std::cout << "sizeof Base1: " << sizeof(Base1)  << std::endl
              << "sizeof Base2: " << sizeof(Base2)  << std::endl
              << "sizeof Derived: " << sizeof(Derived) << std::endl;
    return 0;
}


https://shaharmike.com/cpp/vtable-part1/


This will print different addresses, 32 bytes apart,
this means that the Derived object is actually composed of the two subojects and,
int this case, it has 2 vtable pointers


empty class has sizeof = 1:
{
	chatgpt
	"
		In C++, an empty class has a size of at least 1 byte to ensure that each object of that
		class has a unique address in memory. This is known as the "empty base class optimization" or "empty member optimization".
		Even though an empty class may not have any data members, the C++ standard mandates
		that objects of distinct types must have distinct addresses in memory. Therefore, an empty
		class must have a nonzero size to fulfill this requirement.
	"
}

	Quick rewrite of this:

	VTT: virtual-table table, all constructors
		this is for virtual inheritance, where grandparent is instantiated first
		virtual-base offset-> get to grandparent from subobject

#include <iostream>
using namespace std;

class Grandparent {
 public:
  virtual void grandparent_foo() {}
  int grandparent_data;
};

class Parent1 : virtual public Grandparent {
 public:
  virtual void parent1_foo() {}
  int parent1_data;
};

class Parent2 : virtual public Grandparent {
 public:
  virtual void parent2_foo() {}
  int parent2_data;
};

class Child : public Parent1, public Parent2 {
 public:
  virtual void child_foo() {}
  int child_data;
};

int main() {
  Child child;
}

	non virtual thunk: -> this adjustment from subobject to objcet + object overriden call, from objcet vtable
		thunks appear when a class that is not the first subobject has a virtual function, otherwise, not needed
		object to subobject, simple arithmatic, known by child object

		construction saves one virtual pointer because Child is the same as parent1-in-child subobject




https://shaharmike.com/cpp/vtable-part1/  this is gold, basically

	base has a vtable, and a vbtable for base-in-child, that is what allows the override

code to prove this:

#include <iostream>
using namespace std;


class Parent1 {
 public:
  virtual void parent1_foo() {}
  void * parent1_data;
};

class Parent2 {
 public:
  virtual void parent2_foo() {}
  void * parent2_data;
};

class Child : public Parent1, public Parent2 {
 public:
  virtual void child_foo() {}
  void child_method(){}
  void * child_data;
};

int main(void)
{
    Child c;

    Parent2 p1;
    Parent2 p2;


    void ***p1_ptr = (void ***)&p1;
    void ***p2_ptr = (void ***)&p2;

    std::cout << p1_ptr << "   " << *p1_ptr << std::endl;
    std::cout << p2_ptr << "   " << *p2_ptr << std::endl;

    Parent2 *der_ptr;

    der_ptr = &c;

    void ***p2_der_vtable = (void ***)der_ptr;

    std::cout << p2_der_vtable << "   " << *p2_der_vtable << std::endl;

    return 0;
}


brain breaker:

#include <iostream>
using namespace std;

class FooInterface {
public:
	virtual ~FooInterface() = default;
	virtual void Foo() = 0;
};

class BarInterface {
public:
	virtual ~BarInterface() = default;

	virtual void Bar() = 0;
};

class Concrete : public FooInterface, public BarInterface {
public:
	void Foo() override { cout << "Foo()" << endl; }
	void Bar() override { cout << "Bar()" << endl; }
};

int main() {
	Concrete c;
	c.Foo();
	c.Bar();

	FooInterface* foo = &c;
	foo->Foo();

	BarInterface* bar = (BarInterface*)(foo);
	bar->Bar(); // Prints "Foo()" - WTF?
}

c-style static cast of foo to bar, bar thinks it is bar but is foo
acesses foo's table and executes Foo()
what we do is a dynamic cast to get to the correct subobjcet

Only virtual functions go to the virtual table, all other are staticlly binded

