# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    cpp08_notes.txt                                    :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: codespace <codespace@student.42.fr>        +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/04/17 11:33:25 by marvin            #+#    #+#              #
#    Updated: 2024/04/17 15:13:11 by codespace        ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

Containers

Essentially they are class templates tha define and implement data structures
the one usually needs (templates such that the compiler can type check and
produce machine code for the concrete types we use in these templates)


***********************************************************************
Iterators

Generalized pointers to allowing going through containers (given containers
are templates that are supposed to support any type).

Since they are an abstraction of pointers, function templates that take iterators also take
pointers.
	find <algorithm> can take pointers instead of container.begin and container.end


***********************************************************************
Allocator

More templates: generalized allocation, used for STL for instance
Templates themselves because they will be used to allocate for the size of
the type they will receive (checked at compile time when a container is invocked)

std::allocator is deprecated and from c++11, std:allocator_traits is used by STL

***********************************************************
Vector

std::vector
Defined in header <vector>
template<
    class T,
    class Allocator = std::allocator<T>
> class vector;

To instatiate a vector, one only needs vector<int>, because allocator has a default value
that falls back to std::allocator<int>

Dynamic array that grows in size 2^N or 1.5^N to achieve constant amortized time push_back operation
(i'm not an expert, but makes math sense)
https://stackoverflow.com/questions/5232198/how-does-the-capacity-of-stdvector-grow-automatically-what-is-the-rate

Iterators (pointers) may become invalidated as the array grows in size (if realloc forces copying the full
array in the worst case)


*********************

stack

std::stack is a container ADAPTER, that by default buids off of std:.deque

template<
    class T,
    class Container = std::deque<T>
> class stack;

However
"
	The standard containers std::vector (including std::vector<bool>),
	std::deque and std::list satisfy these requirements. By default, if
	no container class is specified for a particular stack class instantiation,
	the standard container std::deque is used.
"

It can be used as a list, vector or deque
Hence:
"
	Member type	Definition
	container_type	Container
	value_type	Container::value_type
	size_type	Container::size_type
	reference	Container::reference
	const_reference	Container::const_reference
"

Container_type -> if yoou want to user member functions fo the container, you needd to
know what it is and if it iis available.

Iterators: check the type and use the underleeying iterators :)

**************************

std::unordered_map


template<
    class Key,
    class T,
    class Hash = std::hash<Key>,
    class KeyEqual = std::equal_to<Key>,
    class Allocator = std::allocator<std::pair<const Key, T>>
> class unordered_map;

Hash is overridable :0

	https://en.cppreference.com/w/cpp/utility/hash
	std::hash

	"
		Standard library specializations
		Each header that declares the template std::hash also
		provides enabled specializations of std::hash for the following types:

		all cv-unqualified arithmetic types
		all cv-unqualified enumeration types
		all cv-unqualified pointer types
		std::nullptr_t
	"

	default implementations :) also for other types on the page

	If you know something about the distribution of your variables, you can infuse a better
	hash function on your table :)
